{"remainingRequest":"/home/runner/work/U3_Proyecto_Empresarial/U3_Proyecto_Empresarial/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Proyecto_Empresarial/U3_Proyecto_Empresarial/src/views/curso/Tema2.vue?vue&type=template&id=4f40cf70&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Proyecto_Empresarial/U3_Proyecto_Empresarial/src/views/curso/Tema2.vue","mtime":1746069138090},{"path":"/home/runner/work/U3_Proyecto_Empresarial/U3_Proyecto_Empresarial/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Proyecto_Empresarial/U3_Proyecto_Empresarial/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Proyecto_Empresarial/U3_Proyecto_Empresarial/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Proyecto_Empresarial/U3_Proyecto_Empresarial/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Proyecto_Empresarial/U3_Proyecto_Empresarial/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}